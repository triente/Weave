<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<DraggablePanel xmlns="weave.ui.*" xmlns:mx="http://www.adobe.com/2006/mxml" 
				width="300" height="200" implements="weave.api.ui.IVisTool"
				layout="vertical" xmlns:tools="weave.visualization.tools.*" xmlns:editors="weave.editors.*">
	
	<mx:ViewStack id="layoutViewStack" width="100%" height="100%">
		<mx:Canvas label="{lang('Combo Box')}">
			<CustomComboBox id="choiceCombo" prompt="{lang('Select an attribute...')}"
							width="100%" height="100%"
							labelFunction="choiceLabelFunction"
							valueCommit="if (UIUtils.hasFocus(choiceCombo)) handleAttrSelected(choiceCombo.selectedIndex);"
							/>
		</mx:Canvas>
		<mx:Canvas label="{lang('List')}">
			<mx:List id="choiceList" width="100%" height="100%"
					 labelFunction="choiceLabelFunction"
					 change="handleAttrSelected(choiceList.selectedIndex);"
					 backgroundAlpha="0" borderStyle="none"
					 />
		</mx:Canvas>
		<mx:Canvas label="{lang('Vertical Slider')}">
			<mx:VSlider id="choiceVSlider" liveDragging="true" tickInterval="1"
						width="100%" height="100%" snapInterval="1" minimum="0" minHeight="0" showDataTip="false"
						change="handleAttrSelected(choiceVSlider.maximum - choiceVSlider.value);"
						/><!-- slider may not have focus (bar may be clicked instead of thumb) -->
		</mx:Canvas>
		<mx:Canvas label="{lang('Horizontal Slider')}">
			<mx:HBox verticalAlign="middle" width="100%" height="100%">
				<mx:VBox visible="{showPlayButtonCheck.selected}" includeInLayout="{showPlayButtonCheck.selected}" horizontalAlign="center">
					<mx:Button id="playButton" label="&gt;" toggle="true" toolTip="{lang('Play')}" click="handlePlayClick();"/>
					<mx:HSlider id="playSlider" width="48" minWidth="0" minimum=".5" maximum="2" tickInterval="0.5" snapInterval="0.25" value=".75" dataTipFormatFunction="{formatPlayTip}" liveDragging="true"/>
				</mx:VBox>
				<mx:HSlider id="choiceHSlider" liveDragging="true" tickInterval="1"
							width="100%" height="100%" snapInterval="1" minimum="0" minHeight="0" showDataTip="false"
							change="handleAttrSelected(choiceHSlider.value);"
							/><!-- slider may not have focus (bar may be clicked instead of thumb) -->
			</mx:HBox>
		</mx:Canvas>
	</mx:ViewStack>
	
	<ControlPanel>
		<mx:VBox width="100%" label="{lang('Settings')}">
			<mx:HBox>
				<mx:VBox>
					<Indent label="{lang('Visualization tool:')}">
						<CustomComboBox prompt="{lang('Select a tool...')}" id="targetToolCombo" enabled="{targetToolCombo.dataProvider.length > 0}"
										valueCommit="handleComboChange(targetToolCombo, targetTool);" />
						<HelpComponent content="{lang('Select the visualization tool that you want the attribute menu to be linked to.')}"/>
					</Indent>
					<Indent label="{lang('Visualization attribute:')}">
						<CustomComboBox prompt="{lang('Select an attribute...')}" id="targetAttributeCombo" enabled="{targetAttributeCombo.dataProvider.length > 0}"
										valueCommit="handleComboChangeIndex(targetAttributeCombo, targetAttributeNumber);"/>
						<HelpComponent content="{lang('Select the visualization attribute that you want the menu to be linked to.')}"/>
					</Indent>
					<Indent label="{lang('Menu layout:')}">
						<CustomComboBox id="layoutCombo" prompt="{lang('Select a layout...')}" labelFunction="{layoutLabelFunction}"
										dataProvider="{layouts}"/>
						<HelpComponent content="{lang('Select the layout for the attribute menu.')}"/>
						<mx:HBox visible="{layoutCombo.selectedItem == 'HSlider'}"
								 includeInLayout="{layoutCombo.selectedItem == 'HSlider'}">
							<mx:CheckBox id="showPlayButtonCheck" label="Show play button"
										 creationComplete="linkBindableProperty(showPlayButton, showPlayButtonCheck, 'selected');"/>
							<mx:CheckBox id="autoPlayRepeatCheck" label="Loop"
										 creationComplete="linkBindableProperty(autoPlayRepeat, autoPlayRepeatCheck, 'selected');"/>
						</mx:HBox>
					</Indent>
				</mx:VBox>
			</mx:HBox>
			<ColumnListComponent id="choicesComponent" label="{lang('Attributes to appear in the menu')}" />
			<Indent label="{lang('Label function')}">
				<mx:TextInput width="100%" creationComplete="linkBindableProperty(labelFunction, event.target, 'text');"/>
				<mx:Button label="{lang('Reset')}" click="labelFunction.value = DEFAULT_LABEL_FUNCTION;"/>
			</Indent>
		</mx:VBox>
		<editors:WindowSettingsEditor target="{this}"/>
	</ControlPanel>
	<mx:Script>
		<![CDATA[
			import mx.controls.ComboBox;
			import mx.core.UIComponent;
			import mx.utils.StringUtil;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.copySessionState;
			import weave.api.core.ILinkableHashMap;
			import weave.api.data.IAttributeColumn;
			import weave.api.getCallbackCollection;
			import weave.api.linkBindableProperty;
			import weave.api.linkableObjectIsBusy;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.api.reportError;
			import weave.api.ui.IVisTool;
			import weave.api.ui.IVisToolWithSelectableAttributes;
			import weave.compiler.StandardLib;
			import weave.core.CallbackJuggler;
			import weave.core.LinkableBoolean;
			import weave.core.LinkableFunction;
			import weave.core.LinkableHashMap;
			import weave.core.LinkableNumber;
			import weave.core.LinkableString;
			import weave.core.UIUtils;
			import weave.data.AttributeColumns.DynamicColumn;
			import weave.utils.ColumnUtils;
			import weave.utils.LinkableTextFormat;
			import weave.utils.ProbeTextUtils;

			WeaveAPI.registerImplementation(IVisTool, AttributeMenuTool, "Attribute Menu Tool");

			private static const DEFAULT_LABEL_FUNCTION:String = 'column.getMetadata("title")';
			
			private function handlePlayClick():void
			{
				lastFrame = getTimer() - 1000 / playSlider.value / 2;
				
				// when play is started, repeat is off, and last attr is selected, select first attr.
				if (playButton.selected && !autoPlayRepeat.value)
				{
					var n:int = choices.getNames().length;
					if (choiceHSlider.value == n - 1)
					{
						lastFrame = getTimer();
						handleAttrSelected(0);
					}
				}
			}
			
			private var lastFrame:int = 0;
			private function enterFrame(event:Event):void
			{
				if (playButton.selected)
				{
					// wait until not busy
					if (linkableObjectIsBusy(WeaveAPI.globalHashMap))
						return;
					if (lastFrame == 0 || getTimer() > lastFrame + 1000 / playSlider.value)
					{
						if (lastFrame)
						{
							var n:int = choices.getNames().length;
							if (choiceHSlider.value == n - 1 && !autoPlayRepeat.value)
							{
								playButton.selected = false;
							}
							else
							{
								handleAttrSelected((choiceHSlider.value + 1) % n);
							}
						}
						lastFrame = getTimer();
					}
				}
			}
			private function formatPlayTip(value:Number):String
			{
				if (value == 1)
					return lang('1 frame per second');
				return value + lang(' frames per second');
			};
			
			public const targetTool:LinkableString = newLinkableChild(this, LinkableString);
			public const targetAttributeNumber:LinkableNumber = registerLinkableChild(this, new LinkableNumber(-1, isFinite));
			public const choices:LinkableHashMap = registerLinkableChild(this, new LinkableHashMap(IAttributeColumn));
			public const layoutMode:LinkableString = registerLinkableChild(this, new LinkableString(layouts[0], verifyLayoutMode));
			public const labelFunction:LinkableFunction = registerLinkableChild(this, new LinkableFunction(DEFAULT_LABEL_FUNCTION, true, false, ['column']), handleChoicesChange);
			public const selectedAttribute:LinkableString = newLinkableChild(this, LinkableString, handleSelectedAttributeChange);
			public const showPlayButton:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(false));
			public const autoPlayRepeat:LinkableBoolean = registerLinkableChild(this, new LinkableBoolean(true));
			private const toolJuggler:CallbackJuggler = new CallbackJuggler(this, handleToolChange, true);
			private var _attrNames:Array = [];
			private var _attrs:Array = [];
			
			// used to label the choices
			private function choiceLabelFunction(column:IAttributeColumn):String
			{
				var result:String = ColumnUtils.getTitle(column);
				if (labelFunction.value)
				{
					try
					{
						result = labelFunction.apply(this, [column]) || '';
					}
					catch (e:Error)
					{
						result = '';
					}
				}
				return result;
			}
			
			private static const layouts:Array = ["ComboBox", "List", "VSlider", "HSlider"];
			private static const layoutLabels:Array = [lang('Combo Box'), lang('List'), lang('Vertical Slider'), lang('Horizontal Slider')];
			private static function verifyLayoutMode(value:String):Boolean { return layouts.indexOf(value) >= 0; }
			
			private function layoutLabelFunction(inputString:String):String
			{
				return layoutLabels[layouts.indexOf(inputString)];
			}
			
			override protected function constructor():void
			{
				super.constructor();
			}
			
			// called after children have been created
			override protected function childrenCreated():void
			{
				super.childrenCreated();
				
				// have a default dynamic title
				panelTitle.value = lang('Attribute menu for {0}', '{targetAttributeName}');
				
				// have some default choices ready when the tool is created
				copySessionState(ProbeTextUtils.probedColumns, choices);
				
				pinned.value = true;
				
				var ltf:LinkableTextFormat = Weave.properties.defaultTextFormat;
				var target:UIComponent = this;
				getCallbackCollection(ltf).addGroupedCallback(this, function():void { ltf.copyToStyle(target); }, true);
				
				addEventListener(Event.ENTER_FRAME, enterFrame);
				
				// Since we're adding these callbacks after the children have been created,
				// we don't have to worry about ui components being null inside the callbacks.
				Weave.root.childListCallbacks.addGroupedCallback(this, handleGlobalListChange, true);
				targetTool.addGroupedCallback(this, validateToolJugglerTarget, true);
				targetAttributeNumber.addImmediateCallback(this, handleTargetAttributeChange, true);
				choices.addImmediateCallback(this, handleChoicesChange, true);
				showPlayButton.addImmediateCallback(this, stopPlay);
				
				choicesComponent.hashMap = choices;
				
				linkBindableProperty(layoutMode, layoutCombo, 'selectedItem');
				layoutMode.addImmediateCallback(this, handleLayoutMode);
				
				callLater(showControlPanelIfNothingSelected);
			}
			
			private function stopPlay():void
			{
				playButton.selected = false;
			}
			
			private function handleLayoutMode():void
			{
				stopPlay();
				layoutViewStack.selectedIndex = layouts.indexOf(layoutMode.value);
			}
			
			private function showControlPanelIfNothingSelected():void
			{
				// when the tool is created and nothing is selected, show the control panel
				if (!targetTool.value && targetAttributeNumber.value < 0 && !WeaveAPI.StageUtils.mouseButtonDown)
					toggleControlPanel();
			}
			
			// this returns the tool object corresponding to the selected item in the toolCombo
			public function getTargetTool():IVisToolWithSelectableAttributes
			{
				return toolJuggler.target as IVisToolWithSelectableAttributes;
			}
			
			public function get targetAttributeName():String
			{
				return _attrNames[targetAttributeNumber.value];
			}
			
			// called whenever a global object gets added/removed/reordered
			private function handleGlobalListChange():void
			{
				// update the list of tools
				targetToolCombo.dataProvider = Weave.root.getNames(IVisToolWithSelectableAttributes);
				// make sure the correct item is selected
				targetToolCombo.selectedItem = targetTool.value;
				validateToolJugglerTarget();
			}
			
			private function validateToolJugglerTarget():void
			{
				toolJuggler.target = Weave.root.getObject(targetTool.value) as IVisToolWithSelectableAttributes;
			}
			
			// called when the tool triggers callbacks
			private function handleToolChange():void
			{
				// make sure the correct item is selected
				targetToolCombo.selectedItem = targetTool.value;
				
				var tool:IVisToolWithSelectableAttributes = getTargetTool();
				// update the list of available attributes
				if (tool)
				{
					var names:Array = tool.getSelectableAttributeNames() || [];
					var attrs:Array = tool.getSelectableAttributes() || [];
					if (StandardLib.arrayCompare(names, _attrNames) || StandardLib.arrayCompare(attrs, _attrs))
					{
						_attrs = attrs;
						targetAttributeCombo.dataProvider = _attrNames = names;
					}
				}
				else if (_attrNames.length)
				{
					_attrs = [];
					targetAttributeCombo.dataProvider = _attrNames = [];
				}
				
				// after we set the data provider, we have to make sure the correct item is selected
				handleTargetAttributeChange();
			}
			
			// called when the target attr changes
			private function handleTargetAttributeChange():void
			{
				// found the attribute name in the list, now check if it's a compatible object
				var obj:Object = _attrs[targetAttributeNumber.value];
				var compatible:Boolean = obj is DynamicColumn || obj is ILinkableHashMap;
				layoutViewStack.enabled = compatible;
				
				// make sure the correct item is selected
				targetAttributeCombo.selectedIndex = compatible ? targetAttributeNumber.value : -1;
				// clear the choice
				//				choiceCombo.selectedIndex = -1;
				//				choiceList.selectedIndex = -1;
			}
			
			// called when the admin alters the choices through the control panel
			private function handleChoicesChange():void
			{
				if (!parent)
				{
					callLater(handleChoicesChange);
					return;
				}
				
				// update the list of column objects available through the main window combo box
				choiceCombo.dataProvider = choices.getObjects();
				choiceList.dataProvider = choices.getObjects();
				
				// get a list of labels
				var columns:Array = choices.getObjects();
				var names:Array = [];
				for (var i:uint = 0; i < columns.length; i++)
					names[i] = choiceLabelFunction(columns[i]);
				
				// special case for VSlider -- reverse order
				choiceVSlider.labels = names.concat().reverse();
				choiceHSlider.labels = names;
				choiceVSlider.maximum = names.length - 1;
				choiceHSlider.maximum = names.length - 1;
			}
			
			// called when combo box selection changes, makes sure it has focus before setting target LinkableString
			private function handleComboChange(combo:ComboBox, target:LinkableString):void
			{
				if (UIUtils.hasFocus(combo))
					target.value = combo.selectedItem as String;
			}
			
			private function handleComboChangeIndex(combo:ComboBox, target:LinkableNumber):void
			{
				if (UIUtils.hasFocus(combo))
					target.value = combo.selectedIndex;
			}
			
			// called when the user clicks on the combo in the main AttributeMenuTool window
			private function handleAttrSelected(selectedIndex:int):void
			{
				var tool:IVisToolWithSelectableAttributes = getTargetTool();
				// do nothing if there is no tool or the component doesn't have focus
				if (!tool)
					return;
				
				// find the index of the tool attribute selected in the control panel
				var index:int = targetAttributeNumber.value;
				if (index < 0 || index >= _attrs.length)
				{
					// we didn't find the "SelectableAttributeName"
					reportError(StringUtil.substitute('"{0}" does not have an attribute at index {1}', targetTool.value, index));
					return;
				}
				
				// using the index, get the corresponding "SelectableAttribute" from the tool
				var dynamicColumn:DynamicColumn = _attrs[index] as DynamicColumn;
				var hashMap:ILinkableHashMap = _attrs[index] as ILinkableHashMap;
				
				if (hashMap)
				{
					ColumnUtils.forceFirstColumnDynamic(hashMap);
					dynamicColumn = hashMap.getObjects(IAttributeColumn)[0];
				}
				
				// use the same hack used by the AttributeSelectorPanel to find a nested dynamic column.
				dynamicColumn = AttributeSelectorPanel.hack_findInternalDynamicColumn(dynamicColumn);
				
				if (dynamicColumn)
				{
					// get the column object the user clicked on and set the tool attribute
					var availableChoices:Array = choices.getObjects(IAttributeColumn);
					var selectedAttr:IAttributeColumn = availableChoices[selectedIndex] as IAttributeColumn;
					if (selectedAttr)
					{
						dynamicColumn.requestLocalObjectCopy(selectedAttr);
						selectedAttribute.value = choices.getName(selectedAttr);
					}
				}
				else
				{
					reportError('This option is not supported for the attribute "' + targetAttributeName + '"');
				}
			}
			
			private function handleSelectedAttributeChange():void
			{
				if (!parent)
				{
					callLater(handleSelectedAttributeChange)
					return;
				}
				
				var names:Array = choices.getNames();
				var selectedIndex:int = names.indexOf(selectedAttribute.value);
				choiceCombo.selectedIndex = selectedIndex;
				choiceList.selectedIndex = selectedIndex;
				if (selectedIndex >= 0)
				{
					choiceHSlider.value = selectedIndex;
					choiceVSlider.value = names.length - 1 - selectedIndex;
					handleAttrSelected(selectedIndex);
				}
			}
			
			[Deprecated(replacement="targetAttributeNumber")] public function set targetAttribute(value:String):void
			{
				WeaveAPI.StageUtils.callLater(this, function():void{
					validateToolJugglerTarget();
					handleToolChange();
					targetAttributeNumber.value = _attrNames.indexOf(value);
				}, null, WeaveAPI.TASK_PRIORITY_IMMEDIATE);
			}
			
			[Deprecated] public function set hack_showPlayButton(value:Boolean):void
			{
				showPlayButton.value = value;
				panelTitle.value = StandardLib.replace(panelTitle.value, "{hack_showPlayButton=true;''}", "");
			}
		]]>
	</mx:Script>
</DraggablePanel>
