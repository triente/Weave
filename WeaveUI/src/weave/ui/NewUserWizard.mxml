<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<ui:WizardViewStack
	xmlns:mx="http://www.adobe.com/2006/mxml"
	xmlns:ui="weave.ui.*"
	label="{lang('Import Data to Weave')}"
	width="100%" height="100%"
	finishEnabled="false"
	creationComplete="handleCreationComplete()" xmlns:editors="weave.ui.editors.*" xmlns:tools="weave.visualization.tools.*"
	>
	<mx:VBox id="upload" width="100%" height="100%">
	
		<!--Image from http://www.iconeden.com/icon/milky-a-free-vector-iconset.html-->
		<mx:HBox>
		<mx:Label text="{lang('Load local file')}"/>
		<ui:HelpComponent>
			Accepts XLS,CSV or Text file. Data should be delimited (by commas or tabs, etc.). You can check if the data has been parsed correctly in the next step.
		</ui:HelpComponent>			
		</mx:HBox>
		<mx:HBox>
			<mx:Image click="browseForFiles()" id="uploadImage" buttonMode="true" useHandCursor="true" source="@Embed(source= '/weave/resources/images/add_file_large.png')"/>
			<mx:Label color="0xFF0000" id="uploadMessage"/>
		</mx:HBox>
		<!--<mx:Label text="OR" fontWeight="bold" />
		<mx:Label text="{lang('Enter File URL')}"/>
		<mx:HBox>
		<mx:TextInput width="200" borderStyle="solid" toolTip="enter URL"/>
		<mx:Label id="urlMessage"/>
		</mx:HBox>-->
		<mx:Label text="{lang('OR')}" fontWeight="bold" />
		<mx:HBox>
			<mx:Label text="{lang('Paste your data below')}"/>
			<ui:HelpComponent>
				Paste a delimited data set (delimited by commas or tabs, etc.). You can check if the data has been parsed correctly in the next step.
			</ui:HelpComponent>
		</mx:HBox>
		<mx:TextArea id="dataTextArea" change="handleTextAreaChange()" width="400" height="250"/>
	</mx:VBox>
	<mx:VBox id="gridBox" width="100%" height="100%">
		<mx:HBox width="100%">
			<mx:Text text="{lang('Check your data!')}"/>
			<ui:HelpComponent>
				<ui:htmlText>
					<![CDATA[
						<b>Check your data!</b>
						<p>The Grid shows you how we interpret your data. Check the rows and columns to confirm that they are in the correct format. Check the Unique Identifier Column and the Delimiter Combo Box. Click next if your data is in the right format.</p>
						<b>Unique Identifier Column</b>
						<p>This is the name of the column header that uniquely identifies each	row of your dataset. We have computed the columns that contain unique values and set the Unique Column Identifier to the first option. You can set it any other available option within the Combo Box. If you are not sure which column to select or if you don't see this combo box you can ignore for now.</p>
						<b>Delimiter</b>
						<p>We assume that your data is delimited so that we can correctly identify the columns within the dataset. When you load the data, we do a quick check to compute the delmiter and then parse the data. Use the grid to check if the data has been parsed correctly. If the wrong delimiter is used you can select from the combo box the commonly used delimiters (Space, Comma, Semi Colon, Tab). You can also type a single character delimiter. The grid displays the parsed data every time you change the delimiter</p>
					]]>
				</ui:htmlText>
			</ui:HelpComponent>
		</mx:HBox>
		<mx:HBox visible="{(keyColumnSelector.dataProvider as ICollectionView).length != 0}">
			<mx:Label text="{lang('Unique Identifier Column')}" />
			<ui:CustomComboBox toolTip="{lang('This is the column which uniquely identifies each row in your dataset. If you prefer you can change it to a different column.')}" selectedIndex="0" id="keyColumnSelector"/>
		</mx:HBox>
		<ui:KeyTypesMenu id="keyTypeSelector"/>
		<mx:HBox id="delimiterBox">
			<mx:Label text="{lang('Delimiter: ')}"/>
			<ui:CustomComboBox id="delimiterSelector" toolTip="{lang('If there is a problem, try changing the delimiter (you can also type a different delimiter).')}" editable="true" dataProvider="['Comma','Space','Tab','Semi Colon']" keyUp="handleDelimiterChange(event)" change="handleDelimiterChange(event)"/>
		</mx:HBox>
		<mx:DataGrid id="grid" height="100%"/>
		
	</mx:VBox>
	<mx:VBox id="visTools" width="100%">
		<mx:Text text="{lang('Your data is now ready to be visualized!')}"/>
		<mx:Text text="{lang('* Click the image below to add a visual tool or')}"/>
		<mx:HBox><mx:Text text="{lang('* Use the')}"/><mx:Text fontWeight="bold" text="'Tools'"/><mx:Text text="{lang(' menu to add more visual tools')}"/></mx:HBox>		
		<mx:HBox><mx:Text text="{lang('* Click the')}"/><mx:Image source="@Embed(source= '/weave/resources/images/tinyWrench.png')"/><mx:Text text="{lang(' image in the visual tools to edit the dimensions.')}"/></mx:HBox>
		<mx:HBox><mx:Text text="{lang('* Add as many different tools and start')}"/><mx:Text fontWeight="bold" text="Weave" paddingRight="-5"/><mx:Text paddingLeft="-5" text="-ing!"/></mx:HBox>
		
		<!--<mx:Text leading="-3" width="100%" >
			<mx:htmlText>
				<![CDATA[
					<li>Click on the image below to add a visual tool or use the <b>'Tools'</b> menu.</li>
					<li>Click the <b>Wrench</b> image at the top right corner of the tools to edit the dimensions.</li>
					<li>Add as many different tools and start <b>Weave</b>-ing!</li>
				]]>
			</mx:htmlText>	
		</mx:Text>-->
		<!--<mx:Text paddingLeft="20" text="-> Select a visual tool from below or use the 'Tools' menu at the top."/>
		<mx:Text paddingLeft="20" text="-> Use the Wrench button in the tools to edit its attributes"/>
		<mx:Text paddingLeft="20" text="-> Add as many different tools as you want. Start Weaving!"/>
		-->
		<!--Images from http://www.webresourcesdepot.com/free-vector-chart-icons/-->
		<mx:HBox>
			<mx:VBox>
				<mx:Image width="{thumbnailWidth}" height="{thumbnailHeight}" click="createGlobalObject(CompoundBarChartTool)" id="barChartImage" buttonMode="true" useHandCursor="true" source="@Embed(source= '/weave/resources/images/bar_chart_weave.png')"/>
				<mx:Label text="{lang('Bar Chart')}" fontWeight="bold"/>
			</mx:VBox>
			<mx:VBox>
				<mx:Image width="{thumbnailWidth}" height="{thumbnailHeight}" click="createGlobalObject(LineChartTool)" id="lineChartImage" buttonMode="true" useHandCursor="true" source="@Embed(source= '/weave/resources/images/line_chart_weave_new.png')"/>
				<mx:Label text="{lang('Line Chart')}" fontWeight="bold"/>
			</mx:VBox>
			<mx:VBox>
				<mx:Image width="{thumbnailWidth}" height="{thumbnailHeight}" click="createGlobalObject(ScatterPlotTool)" id="scatterplotImage" buttonMode="true" useHandCursor="true" source="@Embed(source= '/weave/resources/images/scatter_plot_weave_new.png')"/>
				<mx:Label text="{lang('Scatterplot')}" fontWeight="bold"/>
			</mx:VBox>
			
		</mx:HBox>
		<mx:HBox>
			<mx:VBox>
				<mx:Image width="{thumbnailWidth}" height="{thumbnailHeight}" click="createGlobalObject(PieChartTool)" id="pieChartImage" buttonMode="true" useHandCursor="true" source="@Embed(source= '/weave/resources/images/pie_chart_weave.png')"/>
				<mx:Label text="{lang('Pie Chart')}" fontWeight="bold"/>
			</mx:VBox>
			<mx:VBox>
				<mx:Image width="{thumbnailWidth}" height="{thumbnailHeight}" click="createGlobalObject(GaugeTool)" id="gaugeImage" buttonMode="true" useHandCursor="true" source="@Embed(source= '/weave/resources/images/gauge_meter_weave.png')"/>
				<mx:Label text="{lang('Gauge Meter')}" fontWeight="bold"/>
			</mx:VBox>
			<mx:VBox>
				<mx:Image width="{thumbnailWidth}" height="{thumbnailHeight}" click="createGlobalObject(HistogramTool)" id="histogramImage" buttonMode="true" useHandCursor="true" source="@Embed(source= '/weave/resources/images/histogram_weave.png')"/>
				<mx:Label text="{lang('Histogram')}" fontWeight="bold"/>
			</mx:VBox>
			
		</mx:HBox>
	</mx:VBox>
	<mx:Script>
		<![CDATA[
			import com.as3xls.xls.Cell;
			import com.as3xls.xls.ExcelFile;
			import com.as3xls.xls.Sheet;
			
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.controls.Alert;
			import mx.controls.dataGridClasses.DataGridColumn;
			
			import weave.Weave;
			import weave.api.WeaveAPI;
			import weave.api.core.ILinkableHashMap;
			import weave.api.core.ILinkableObject;
			import weave.api.data.IAttributeColumn;
			import weave.api.data.IKeySet;
			import weave.api.data.IQualifiedKey;
			import weave.api.reportError;
			import weave.api.ui.IPlotter;
			import weave.data.AttributeColumns.FilteredColumn;
			import weave.data.CSVParser;
			import weave.data.DataSources.CSVDataSource;
			import weave.data.QKeyManager;
			import weave.utils.ColumnUtils;
			import weave.utils.CustomCursorManager;
			import weave.utils.ProbeTextUtils;
			import weave.visualization.layers.InteractiveVisualization;
			import weave.visualization.plotters.GeometryPlotter;
			import weave.visualization.tools.CompoundBarChartTool;
			import weave.visualization.tools.GaugeTool;
			import weave.visualization.tools.HistogramTool;
			import weave.visualization.tools.LineChartTool;
			import weave.visualization.tools.MapTool;
			import weave.visualization.tools.PieChartTool;
			import weave.visualization.tools.ScatterPlotTool;
			private static const indent:int = 360;
			
			[Bindable]
			private var thumbnailWidth:Number = 128;
			[Bindable]
			private var thumbnailHeight:Number = 128;
			
			[Embed(source='/weave/resources/images/tinyWrench.png')] public var wrenchImage:Class;
			
			private function handleCreationComplete():void
			{
				//Creating pre-defined delimiter objects Comma, Tab , Semi Colon and Space. 
				//The count field helps to quickly identify the object that probably applies to the data entered.				
				delimiters.comma = new Object();
				delimiters.comma.name = "Comma";
				delimiters.comma.string = ",";
				delimiters.comma.count = 0;
				
				delimiters.tab = new Object();
				delimiters.tab.name = "Tab";
				delimiters.tab.string = "\t";
				delimiters.tab.count= 0;
				
				delimiters.colon = new Object();
				delimiters.colon.name = "Semi Colon";
				delimiters.colon.string = ";";
				delimiters.colon.count = 0;
				
				delimiters.space = new Object();
				delimiters.space.name = "Space";
				delimiters.space.string = " ";
				delimiters.space.count = 0;
			}
			
			private var delimiters:Object = new Object();
			
			private var _uniqueNameForDataSource:String="";
			private var _tempArray:Array = [];
			override public function next():void
			{
				super.next();
				
				//We are into the second step. If a file is not loaded and the text area has data then parse it
				if(selectedIndex == 1)
				{
					if(_fileLoader == null && dataTextArea.text !== "")
					{
						var dataString:String = dataTextArea.text;
						delimiterBox.visible = true;
						var delimiter:Object = getDelimiterObject(dataString);
						delimiterSelector.selectedItem = delimiter.name;
						_tempArray = new CSVParser(false, delimiter.string).parseCSV(dataTextArea.text);
						updateCSVDataStringFromArray(_tempArray);
						_uniqueNameForDataSource = Weave.root.generateUniqueName("CSVDataSource");
						keyTypeSelector.addKeyTypeToMenu(_uniqueNameForDataSource);
					}
					
				}
				//We are into the third step, create a data source from data entered.
				if(selectedIndex == 2)
				{
					try
					{
						if(csvDataString == "")
							return;
						var csvDataSource:CSVDataSource = Weave.root.requestObject(_uniqueNameForDataSource,CSVDataSource, false);
						csvDataSource.setCSVData(_tempArray);
						if(keyTypeSelector.selectedItem)
							csvDataSource.keyType.value = keyTypeSelector.selectedItem as String;
						else
							csvDataSource.keyType.value = _uniqueNameForDataSource;
						if(uniqueColumns.length !=0)
						{
							csvDataSource.keyColName.value = keyColumnSelector.selectedItem as String;
						}
						
						assignProbeColumnsFromSource(csvDataSource);						
					}
					catch(e:Error)
					{
						reportError(e);
					}
				}
			}
			
			private function getUniqueElementsFromArray(source:Array):Array
			{
				var result:Array = [];
				
				var dict:Dictionary = new Dictionary();
				
				for each(var obj:Object in source)
				{
					if(dict[obj] == undefined)
					{
						dict[obj] = true;
					}
				}
				
				for (var key:Object in dict)
				{
					result.push(key);
				}
				
				return result;
			}
			
			private function assignProbeColumnsFromSource(source:CSVDataSource):void
			{
				var hashMap:ILinkableHashMap = ProbeTextUtils.probedColumns;
				var columnNames:Array = source.getColumnNames();
				
				//adding first and last column to probed columns
				var col1:IAttributeColumn = source.putColumnInHashMap(columnNames[0], hashMap);
				var col2:IAttributeColumn = source.putColumnInHashMap(columnNames[columnNames.length - 1], hashMap);
				
				//setting color column to first column
				Weave.defaultColorDataColumn.internalDynamicColumn.requestLocalObjectCopy(col1);
			}

			
			
			
			/**
			 * This function takes the data string to be parsed and returns the probable delimiter Object (as defined in the handleCreationComplete)
			 * It splits the data string for each delimiter and keeps a count. The one returns the maximum substrings is selected.
			 * Defaults to comma.
			 *  
			 * */
			private function getDelimiterObject(dataString:String):Object
			{
				//applies comma by default
				var appliedDemiliter:Object = delimiters.comma;
				for each (var delimiter:Object in delimiters)
				{
					var search_sub_strings:Array = dataString.split(delimiter.string);
					if(search_sub_strings == null)
						continue;
					delimiter.count = search_sub_strings.length;
					if(appliedDemiliter.count < delimiter.count)
						appliedDemiliter = delimiter;
				}
				return appliedDemiliter;
	
			}
			
			private var _fileLoader:FileReference = null;
			private var csvDataString:String = "";
			/**
			 * browseForfiles: opens up a file browser window to upload CSV files 
			 **/
			private function browseForFiles():void
			{
				if(_fileLoader == null)
				{
					_fileLoader = new FileReference();
					_fileLoader.addEventListener(Event.SELECT, handleDatasetSelected);
					_fileLoader.addEventListener(Event.COMPLETE, handleDatasetLoaded);
				}
				
				_fileLoader.browse([new FileFilter("CSV/XLS/TXT", "*.csv;*.xls;*.txt")]);
			}
			
			
			private function handleDatasetSelected(event:Event):void
			{
				uploadMessage.text = lang("loading...");
				_fileLoader.load();
			}

			private function handleDatasetLoaded(event:Event):void
			{
				
				//removing text data if any
				dataTextArea.text = "";
				var dataByteArray:ByteArray = null;
					
				// the file extension should be at the end of the file minus the four characters for the extension (i.e. ".csv" )
				var extensionPosition:int = _fileLoader.name.length - 4;
				
				try{				
					if(_fileLoader.name.search(".csv") == extensionPosition || _fileLoader.name.search(".CSV") == extensionPosition )
					{
						dataByteArray = _fileLoader.data;
						delimiterBox.visible = false;
						_tempArray= WeaveAPI.CSVParser.parseCSV(dataByteArray.toString());
						updateCSVDataStringFromArray(_tempArray);						
						
					}else if(_fileLoader.name.search(".xls") == extensionPosition || _fileLoader.name.search(".XLS") == extensionPosition ){
						
						delimiterBox.visible = false;
						var xlsFile:ExcelFile = new ExcelFile();

						xlsFile.loadFromByteArray(_fileLoader.data);
						
						if(xlsFile.sheets.length == 0)
						{
							Alert.show(lang("No data found"));
							return;
						}

						var xlsDataArray:Array = convertSheetsToArrays(xlsFile.sheets[0]);
						
						
						// if there is more than one row and last row is empty,
						// remove last row assuming it is there because of a newline at the end of the file.
						while (xlsDataArray.length > 1)
						{
							var lastRow:Array = xlsDataArray[xlsDataArray.length - 1];
							if (lastRow.length == 1 && lastRow[0] == '')
								xlsDataArray.pop();
							else
								break;
						}
						
						//check last row for empty array of data
						var rowLength:int = xlsDataArray[0].length;
						var colLength:int = xlsDataArray.length;
						var count:int = 0;
						var lastRowEmpty:Boolean = true;
						while(count<rowLength)
						{
							if(xlsDataArray[colLength-1][count] != "")
								lastRowEmpty = false;
							count++;
						}
						
						if(lastRowEmpty)
							xlsDataArray.pop();
						_tempArray = xlsDataArray;
						updateCSVDataStringFromArray(xlsDataArray);
					}else if(_fileLoader.name.search(".txt") == extensionPosition || _fileLoader.name.search(".TXT") == extensionPosition ){
						
						dataByteArray = _fileLoader.data;
						delimiterBox.visible = true;
						var fileDataString:String = dataByteArray.toString();
						var delimiter:Object = getDelimiterObject(fileDataString);
						delimiterSelector.selectedItem = delimiter.name;
						var fileDataArray:Array = new CSVParser(false, delimiter.string).parseCSV(fileDataString);
						_tempArray = fileDataArray;
						updateCSVDataStringFromArray(fileDataArray);
					}
					keyColumnSelector.dataProvider = uniqueColumns;
					uploadMessage.text = lang("Loaded!");
					_uniqueNameForDataSource = Weave.root.generateUniqueName("CSVDataSource");
					this.next();
				}
					catch(e:Error){
					uploadMessage.text = lang("Error uploading file: ")+e.message.toString();
				}
				
				
			}
			
			public function CSVFileDrop(data:ByteArray):void
			{
				delimiterBox.visible = false;
				_tempArray = WeaveAPI.CSVParser.parseCSV(data.toString());
				updateCSVDataStringFromArray(_tempArray);		
				
				keyColumnSelector.dataProvider = uniqueColumns;
				uploadMessage.text = lang("Loaded!");
				_uniqueNameForDataSource = Weave.root.generateUniqueName("CSVDataSource");
				this.next();
			}
			
			private function convertSheetsToArrays(xlsSheet:Sheet):Array
			{
				var paramArray:Array = new Array();
				
				var xlsArrayCollection:ArrayCollection = xlsSheet.values;
				
				for(var i:int = 0; i<xlsArrayCollection.length; i++)
				{
					paramArray[i] = [];
					for(var j:int = 0; j<xlsArrayCollection[i].length; j++)
					{
						paramArray[i].push((xlsArrayCollection[i][j] as Cell).value);
					}
				}
				
				return paramArray;
			}
			
			private function createGlobalObject(classDef:Class, name:String = null):*
			{
				var className:String = getQualifiedClassName(classDef).split("::")[1];
				
				if (name == null)
					name = Weave.root.generateUniqueName(className);
				var object:* = Weave.root.requestObject(name, classDef, false);
				if (object is DraggablePanel)
					(object as DraggablePanel).restorePanel();
				// put panel in front
				Weave.root.setNameOrder([name]);
				
//				dispatchEvent(new CloseEvent(CloseEvent.CLOSE));
				
				return object;
			}
			
			
			[Bindable]
			private var uniqueColumns:Array = [];
			
			/**
			 * takes an array of data and returns an array of column names that are unique
			 * @data An Array of arrays to be processed for unique columns
			 * @return An array of column names.If no uniquie column is found retuns an empty array
			 * */
			private function computeUniqueColumnNames(data:Array):Array
			{
				var uniqueColumns:Array = []
				
				for(var j:int = 0;j<data[0].length;j++)
				{
					var unique:Boolean = true;
					var testUniquenessObject:Object = new Object();
					for(var i:int=1;i<data.length;i++)
					{
						if (testUniquenessObject[data[i][j]] == undefined)
						{
							testUniquenessObject[data[i][j]] = true;
							continue;
						}
						unique = false;
						break;
					}
					if(unique)
					{
							uniqueColumns.push(data[0][j]);
					}
				}
				return  uniqueColumns;								
			}
			
			private function handleDelimiterChange(event:Event):void
			{
				var appliedDemiliter:Object = new Object();
				
				//if the user enters a delimiter, assign it to appliedDelimited.string				
				appliedDemiliter.string = delimiterSelector.text.substr(0,1);
				
				//if the user has selected from one of the given choices, the selected delimiter object will be assigned
				//if no match is found then it is a user-defined delimiter as assigned above
				for each (var delimiter:Object in delimiters)
				{
					if(delimiter.name == delimiterSelector.selectedItem as String)
					{
						appliedDemiliter = delimiter;
					}
				}
				
				var dataString:String = _fileLoader ? _fileLoader.data.toString() : dataTextArea.text;
				_tempArray= new CSVParser(false, appliedDemiliter.string).parseCSV(dataString);
				
				updateCSVDataStringFromArray(_tempArray);
			}
			
			private function updateCSVDataStringFromArray(csvDataArray:Array):void
			{
				//using this to store the order of columns. convertRowsToRecords re-orders the data columns.
				var headerArray:Array = csvDataArray[0];
				var columns:Array = [];
				for (var i:int = 0; i < headerArray.length; i++)
					columns.push(new DataGridColumn(headerArray[i]));
				
				
				csvDataString = WeaveAPI.CSVParser.createCSV(csvDataArray);
				var csvData:Array = WeaveAPI.CSVParser.convertRowsToRecords(csvDataArray);
				uniqueColumns = computeUniqueColumnNames(csvDataArray);
				grid.dataProvider = csvData;
				//setting the original column order
				grid.columns = columns;
				keyColumnSelector.dataProvider = uniqueColumns;
			}
			
			private function handleTextAreaChange():void
			{
				_fileLoader = null;
				uploadMessage.text = "";
			}
			
			
			
		]]>
	</mx:Script>
</ui:WizardViewStack>