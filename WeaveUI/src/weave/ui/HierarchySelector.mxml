<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
Displays catoegories in a tree view and the attributes in a list.
@author skolman
-->
<mx:HDividedBox
	xmlns:ui ="weave.ui.*"
	xmlns:mx="http://www.adobe.com/2006/mxml"
	implements="weave.api.core.ILinkableObject"
	width="100%" height="100%"
	>

	<mx:VBox width="100%" height="100%" id="categoryVBox" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<ui:CustomTree width="100%" height="100%" id="categoriesView" showRoot="false" showDataTips="true" dataTipFunction="getCategoryLabel" change="handleCategoryClick(true)"/>
	</mx:VBox>
	<mx:VBox width="100%" height="100%" id="attributeVBox" verticalScrollPolicy="off" horizontalScrollPolicy="off">
		<ui:CustomList width="100%" height="100%" id="attributesView" showDataTips="true" dataTipFunction="getLabelForNode" labelFunction="getLabelForNode" mouseDown="if (attributesView.mouseX &lt; attributesView.width - 16) handleAttributeClick(event)" change="handleAttributeClick(event)"/>
	</mx:VBox>

	<mx:Script>
		<![CDATA[
			import mx.collections.ArrayCollection;
			import mx.collections.ICollectionView;
			import mx.collections.XMLListCollection;
			
			import weave.api.core.ILinkableObject;
			import weave.api.newLinkableChild;
			import weave.api.registerLinkableChild;
			import weave.core.LinkableString;
			import weave.core.LinkableXML;
			import weave.primitives.AttributeHierarchy;
			import weave.utils.HierarchyUtils;
			
			/*************************
			 * public interface
			 *************************/
			
			// the original, unmodified hierarchy
			public const attributeHierarchy:AttributeHierarchy = newLinkableChild(this, AttributeHierarchy, handleHierarchyChange);

			// used to filter the hierarchy attributes
			public const attributeFilter:LinkableString = registerLinkableChild(this, new LinkableString('', isNonNull), filterAttributes);
			
			// used to filter the hierarchy categories
			public const categoryFilter:LinkableString = registerLinkableChild(this, new LinkableString('', isNonNull), handleHierarchyChange);
			
			// the currently selected path to an attribute or category
			public const selectedPath:LinkableXML = registerLinkableChild(this, new LinkableXML(false), handleSelectedPathChange);

			/*************************/
			private function isNonNull(value:String):Boolean { return value != null; }
			
			private var arrColl:ArrayCollection;
			
			override protected function childrenCreated():void
			{
				super.childrenCreated();

				categoriesView.selectedItemsCompareFunction = function(a:*,b:*):Boolean { return a == b; };
				attributesView.selectedItemsCompareFunction = function(a:XML,b:XML):Boolean {
					return HierarchyUtils.nodeNamesMatch(a, b) && (
							HierarchyUtils.nodeContainsAttributes(a, b.attributes()) ||
							HierarchyUtils.nodeContainsAttributes(b, a.attributes())
						);
				};
			}
			
			private function xmlDeleteNode(node:XML, attributes:XMLList):Boolean
			{
				//modified from http://cookbooks.adobe.com/post_Delete_a_node_from_XML___XMLListCollection-5601.html
				
				var parent:XML = node.parent();
				if (parent != null)
				{
					var children:XMLList = parent.children();
					for (var i:Number = 0; i < children.length(); i++)
					{
						if (children[i] == node)
						{
							delete children[i];
							//parent.setChildren(children);
							return true;
						}
					}
				}
				
				return false;
				
			}
			
			
			/**
			 * Triggered when the attributeHierarchy changes.
			 * Assigns the new hierarchy to the Category View and updates the attribute list
			 */
			private function handleHierarchyChange():void
			{
				if(!parent)
					return callLater(handleHierarchyChange);

				var vsp:Number = attributesView.verticalScrollPosition;
				var hsp:Number = attributesView.horizontalScrollPosition;
				
				var i:int;
				if (attributeHierarchy.value == null)
				{
					categoriesView.dataProvider = null;
					attributesView.dataProvider = null;
					
					categoriesView.validateNow();
					attributesView.validateNow();
				}
				else
				{
					categoriesView.dataProvider = getTree(attributeHierarchy.value); 
					handleSelectedPathChange();
				}
				attributesView.verticalScrollPosition = Math.min(vsp, attributesView.maxVerticalScrollPosition);
				attributesView.horizontalScrollPosition = hsp;
			}
			
			
			private function getTree(node:XML):Object
			{
				var result:Object = {label: getLabelForNode(node), object: node, children: []};
				if (node != null)
				{
					var children:XMLList = node.children();
					for (var i:int = 0; i < children.length(); i++)
					{
						var child:XML = children[i];
						if (child != null && String(child.localName()) != "attribute")
						{
							// get subtree
							var subtree:Object = getTree(child);
							if (subtree != null)
							{
								result.children.push(subtree);
							}
						}
					}
				}
				if (result.children.length == 0)
				{
					if ((result.label as String).toLowerCase().search(categoryFilter.value.toLowerCase()) < 0)
						return null;
					result.children = null;
				}
				return result;
			}

			/**
			 * called when selectedPath linkable variable changes
			 */
			private function handleSelectedPathChange():void
			{
				if (!parent)
				{
					callLater(handleSelectedPathChange);
					return;
				}
				if (selectedPath.value != null)
				{
					selectCategory();
					handleCategoryClick(false);
					selectAttribute();
				}
			}
			
			/**
			* Sets the item to be selected in the Category view and scrolls to the selected item
			**/
			private function selectCategory():void
			{
				if(selectedPath.value != null)
				{
					var selectedPathCopy:XML = selectedPath.value;
					var pathDepth:int = HierarchyUtils.getPathDepth(selectedPathCopy);
					if(selectedPathCopy.descendants("attribute").length()>0)
						pathDepth--;
					var selectedCategory:XML = HierarchyUtils.getNodeFromPath(attributeHierarchy.value,selectedPathCopy,pathDepth);
					
					//we need to explcitly clear the openitems because tree does not clear the previous open items by default.
					categoriesView.openItems = [];
					categoriesView.validateNow();
					for(var i:int = 0; i < pathDepth; i++)
					{
						var expandNode:XML = HierarchyUtils.getNodeFromPath(attributeHierarchy.value,selectedPathCopy,i);
						var expandObj:Object = getObjFromNode(expandNode);
						categoriesView.expandItem(expandObj,true,false);
					}
					var selectedObj:Object = getObjFromNode(selectedCategory);
					categoriesView.selectedItem = selectedObj;
					
					var selectedCategoryIndex:int = categoriesView.selectedIndex;
					if(selectedCategoryIndex > -1)
					{
						categoriesView.selectedIndex = -1;
						categoriesView.selectedIndex = selectedCategoryIndex;
						categoriesView.scrollToIndex(selectedCategoryIndex);
					}
				}
			}
			
			/**
			 * Sets the item to be selected in the Attribute view and scrolls to the selected item
			 **/
			private function selectAttribute():void
			{
				if (selectedPath.value != null)
				{
					var selectedAttribute:XML = HierarchyUtils.getNodeFromPath(attributeHierarchy.value, selectedPath.value);
					var vsp:Number = attributesView.verticalScrollPosition;
					attributesView.selectedItem = selectedAttribute;
					attributesView.validateNow();
					var selectedIndex:int = attributesView.selectedIndex;
					if(selectedIndex > -1)
					{
						attributesView.selectedIndex = -1;
						attributesView.selectedIndex = selectedIndex;
						attributesView.scrollToIndex(selectedIndex);
					}
				}
			}
			
			/**
			 * Triggered when a category is clicked.
			 * Same as handleCategoryViewReload but the selectedPath variable is updated.
			*/
			private function handleCategoryClick(setSelectedPath:Boolean):void
			{
				var categoryObject:Object = categoriesView.selectedItem;
				if (!categoryObject)
					return;

				var categoryNode:XML = (categoryObject.object as XML);
				categoriesView.expandItem(categoryObject, true);
				var categoryPath:XML = HierarchyUtils.getPathFromNode(attributeHierarchy.value, categoryNode);

				if (categoryPath == null)
					return; // category not found
				
				// set selected path and load attribute list
				var vsp:Number = attributesView.verticalScrollPosition;
				attributesView.dataProvider = categoryNode.attribute;
				(attributesView.dataProvider as XMLListCollection).filterFunction = attributeFilterFunction;
				(attributesView.dataProvider as ICollectionView).refresh();
				attributesView.verticalScrollPosition = vsp;

				if (setSelectedPath)
					selectedPath.value = categoryPath;
				
			}
			/**
			 * Triggered when an attribute is selected.
			 **/
			private function handleAttributeClick(event:Event):void
			{
				if (!parent)
				{
					//reportError("handleAttributeClick() called when parent == null");
					return;
				}
				var node:XML = attributesView.selectedItem as XML;
				if (node != null)
					selectedPath.value = HierarchyUtils.getPathFromNode(attributeHierarchy.value, node);
			}
			
			private function getObjFromNode(node:XML,subtree:Object=null):Object
			{
				if (subtree == null)
				{
					try
					{
						subtree = categoriesView.dataProvider[0];
					}
					catch (e:Error)
					{
						return null;
					}
				}
				if (subtree.object == node)
				{
					return subtree;
				}
				if (subtree.children == null)
					return null;
				for each (var child:Object in subtree.children)
				{
					var result:Object = getObjFromNode(node, child);
					if (result != null)
					{
						return result;
					}
				}
				return null;
			}
			
			public function attributeFilterFunction(item:Object):Boolean
			{
				var lowerCaseFilter:String = attributeFilter.value.toLowerCase();
				var label:String = getLabelForNode(item);
				if (label.toLowerCase().search(lowerCaseFilter) < 0)
					return false;
				else
					return true;
			}
			
			
			private function filterAttributes():void
			{
				if(attributesView != null && attributesView.dataProvider != null)
				{
					(attributesView.dataProvider as ICollectionView).refresh();
					attributesView.verticalScrollPosition = Math.min(attributesView.verticalScrollPosition, attributesView.maxVerticalScrollPosition);
					
					handleHierarchyChange();
				}
			}
			
			
			
			private function getLabelForNode(item:Object):String
			{
				var node:XML = XML(item);
				var label:String = String(node.@title) || String(node.@dataSourceName) || 'Untitled';
				
				if (attributeFilter.value)
					return label;
				
				// append number of attributes to label
				var numAttrs:int = node.child("attribute").length();
				if (numAttrs > 0)
					label += ' (' + numAttrs + ')';
				var source:String = node.@source;
				if (source)
					label += ' (Source: ' + source + ')';
				
				return label;
			}
			
			private function getCategoryLabel(item:Object):String
			{
				return item.label;
			}
			
			[Embed(source="/weave/resources/images/arrowDown.png")]
			private var _iconImage:Class;
			private function list_iconFunc(item:Object):Class
			{
				return categoriesView.getStyle(item.label);
			}
		]]>
	</mx:Script>
</mx:HDividedBox>
