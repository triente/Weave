<?xml version="1.0" encoding="utf-8"?>
<!--
/*
Weave (Web-based Analysis and Visualization Environment)
Copyright (C) 2008-2011 University of Massachusetts Lowell

This file is a part of Weave.

Weave is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License, Version 3,
as published by the Free Software Foundation.

Weave is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->

<!---
@author fkamayou
@author mervetuccar
@author hbyrne
-->

<ControlPanel xmlns="weave.ui.*"
			  xmlns:mx="http://www.adobe.com/2006/mxml"
			  xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
			  width="400" height="400" backgroundColor="#EFF4BC" horizontalScrollPolicy="off"
			  implements="weave.api.core.ILinkableObject" sessionPanelCoordsAsPercentages="false"
			  title="Disability Options" verticalScrollPolicy="off">
	<mx:HDividedBox id="disabilityOptions" width="100%" height="100%" paddingBottom="{padding}"
					paddingLeft="{padding}" paddingRight="{padding}" paddingTop="{padding}">
		
		<mx:TabNavigator height="100%" borderStyle="inset">
			
			<mx:VBox width="100%" height="100%" label="General Description" horizontalAlign="left"
					 verticalAlign="top">
				<mx:TextArea id="generalDescriptionTextInputBox" width="80%" height="30%"
							  backgroundColor="#EEEEEE" editable="true" horizontalCenter="true"
							  wordWrap="true" text="Weave Visualization."
							  toolTip="Enter a general desciption of your visualizations."/>
			</mx:VBox>
			
			<mx:VBox width="100%" height="100%" label="Detailed Description" horizontalAlign="left"
					 verticalAlign="top">

				<mx:TextArea id="detailedDescriptionTextInputBox" width="80%" height="30% "
							  backgroundColor="#EEEEEE" enabled="true" horizontalCenter="true"
							  wordWrap="true"
							  editable="false" toolTip="Select the detailed description available from the visualizations below."/>
				
				<mx:Button label="Refresh Visualizations" click="updateCheckBoxes()" paddingLeft="2"
						   paddingRight="2" toolTip="Refresh the list of visualizations"/>				
				<mx:VBox id="menuToggleVBox" verticalScrollPolicy="on">
				</mx:VBox>
					
			</mx:VBox>
				
			<mx:VBox width="100%" height="100%" label="Alt Text" horizontalAlign="left"
					 verticalAlign="top">

				<mx:CheckBox id="useGeneralDescriptionCheckBox" toolTip="Add the general description to the Alt Text"
							 label="General Description" selected="true"
							 creationComplete="linkBindableProperty(useGeneralDescription, event.target, 'selected')"/>
				<mx:CheckBox id="useDetailedDescriptionCheckBox" toolTip="Add the detailed description to the Alt Text"
							 label="Detailed Description"
							 creationComplete="linkBindableProperty(useDetailedDescription, event.target, 'selected')"/>
				<mx:TextArea id="AltTextTextArea" width="80%" height="50%"
							 backgroundColor="#EEEEEE" editable="false" text="{generalDescriptionTextInputBox.text}"
							 toolTip="This is the text that will be available for accessibility."/>
			</mx:VBox>
					
					<mx:Script>
						<![CDATA[
							import flash.external.ExternalInterface;
							
							import mx.accessibility.CheckBoxAccImpl;
							import mx.controls.CheckBox;
							import mx.controls.ComboBox;
							import mx.controls.List;
							import mx.controls.Menu;
							import mx.controls.TextArea;
							import mx.controls.TextInput;
							import mx.core.IUIComponent;
							import mx.events.DragEvent;
							import mx.events.FlexEvent;
							import mx.managers.DragManager;
							
							import weave.Weave;
							import weave.api.WeaveAPI;
							import weave.api.core.IDisposableObject;
							import weave.api.core.ILinkableObject;
							import weave.api.detectLinkableObjectChange;
							import weave.api.linkBindableProperty;
							import weave.api.linkSessionState;
							import weave.api.newDisposableChild;
							import weave.api.newLinkableChild;
							import weave.api.registerLinkableChild;
							import weave.api.reportError;
							import weave.api.ui.ILinkableObjectEditor;
							import weave.core.DynamicState;
							import weave.core.LinkableBoolean;
							import weave.core.LinkableHashMap;
							import weave.core.LinkableString;
							import weave.core.SessionManager;
							import weave.editors.Disability;
							import weave.ui.ControlPanel;
							import weave.ui.SessionStateEditor;							
							
							private const useGeneralDescription:LinkableBoolean = new LinkableBoolean(false);
							private const useDetailedDescription:LinkableBoolean = new LinkableBoolean(false);
							
//							private const _generalDescription:LinkableString = new LinkableString("Weave instance");
//							private const _detailedDescription:LinkableString = new LinkableString();
							private const _AltText:LinkableString = new LinkableString();
							
							private const padding:int = 5;
							private var checkBoxArray:Array = [];
							private var _selectedCheckBox : CheckBox;
							private var panelMessages:Dictionary = new Dictionary();
							private var panels:Array = Weave.root.getObjects(DraggablePanel);	
							
							private var _controlPanel:ControlPanel = null;
							private var panel:DraggablePanel;
						
							private var _description:String = "";
							private var _selectedCheckBoxLabelArray : Array = [];
							
							override protected function constructor():void
							{
								super.constructor();
								
								panelWidth.value = "70%";
								panelHeight.value = "70%";
								panelX.value = "15%";
								panelY.value = "15%";
								
							}
						
							override protected function childrenCreated():void
							{
								super.childrenCreated();
								
								Weave.properties.disabilityAltText.addImmediateCallback(this, handleDisabilityAltTextChange);
								useGeneralDescription.addImmediateCallback(this, handleAltText);
								useDetailedDescription.addImmediateCallback(this, handleAltText);
								updateCheckBoxes();	
								//addEventListener(FlexEvent.SHOW, panelRemovedEventHandler);	
								//Weave.properties.disabilityHashMap.addDisposeCallback(label, updateCheckBoxes);
								
								
							}
							protected function handleDisabilityAltTextChange() : void
							{
								ExternalInterface.call("function(objectID, altText) { var weave = objectID ? document.getElementById(objectID) : document.body.firstChild; weave.alt = altText;}",
									
									ExternalInterface.objectID,
									Weave.properties.disabilityAltText.value
								);									  
							}
						
							
/* 							protected function panelRemovedEventHandler(event:Event):void
							{	
								var Name : String = WeaveAPI.getRegisteredImplementationDisplayName(event.currentTarget as Class) || getQualifiedClassName(event.currentTarget).split(':').pop();
								
								updateCheckBoxes();		
							} */
							
							
							/**
							 * 
							 *	This function dynamically update the checkboxes, based on open panels on stage. 
							 * 
							 */
							private function updateCheckBoxes():void
							{
								
								var checkBox:CheckBox   = null;
								checkBoxArray.splice(0); // empty the checkbox array.
								//panels = getWindowsOnStage();
								menuToggleVBox.removeAllChildren();
								
								// we could use panel on stage but might not be necessary
								panels = Weave.root.getObjects(DraggablePanel);
								
								for each(panel in panels)
								{
									delete panelMessages[panel];
									checkBox = new CheckBox();
									checkBox.label = panel.title;
									checkBox.toolTip = "Checking this box appends its description to the advanced description";
									checkBox.addEventListener(MouseEvent.CLICK, handleCheckBoxesSelection(panel))
									menuToggleVBox.addChild(checkBox);
								}             
								
								updateDetailedDescription();
																
							}
							
							
							// http://stackoverflow.com/questions/13486230/to-pass-a-parameter-to-event-listener-in-as3-the-simple-way-does-it-exist
							protected function handleCheckBoxesSelection(panel:DraggablePanel):Function {
								return function(event:MouseEvent):void {
									if ( event.target.selected == true ) 
									{
										panelMessages[panel] = true;
										updateDetailedDescription();
									}
									else
									{
										delete panelMessages[panel];
										updateDetailedDescription();
									}
									
								}
							}
							
							private function updateDetailedDescription():void
							{
								var text:String = "";
								for each (panel in panels)
									if (panelMessages[panel])
										if (Weave.properties.disabilityHashMap[panel])
											text += Weave.properties.disabilityHashMap[panel]  + "\n";
										else
											text += panel.title + "\n"
								detailedDescriptionTextInputBox.text = text;	
							}
							
							protected function handleAltText():void
							{
								if (useGeneralDescription.value)
								{
									if(useDetailedDescription.value)
									{
										Weave.properties.disabilityAltText.value = generalDescriptionTextInputBox.text + "\n" + detailedDescriptionTextInputBox.text;
										AltTextTextArea.text = Weave.properties.disabilityAltText.value;
									} else
									{
										Weave.properties.disabilityAltText.value = generalDescriptionTextInputBox.text;
										AltTextTextArea.text = Weave.properties.disabilityAltText.value;
									}
								} else
								{
									if(useDetailedDescription.value)
									{
										Weave.properties.disabilityAltText.value = detailedDescriptionTextInputBox.text;
										AltTextTextArea.text = Weave.properties.disabilityAltText.value;
									} else
									{
										Weave.properties.disabilityAltText.value = "";
										AltTextTextArea.text ="";
									}
								}
							}
							
							private function getWindowsOnStage(): Array
							{
								var panels:Array = Weave.root.getObjects(DraggablePanel);
								var panelsOnStage:Array = [];
								
								for each ( panel in panels)
								{
									if (!panel.minimized.value)
										panelsOnStage.push(panel);
									
								}
								
								return panelsOnStage;
							}
							
						]]>
					</mx:Script>	
		</mx:TabNavigator>
	</mx:HDividedBox>
</ControlPanel>