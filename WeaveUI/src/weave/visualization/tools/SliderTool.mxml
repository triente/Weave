<?xml version="1.0" encoding="utf-8"?>
<!--
/*
    Weave (Web-based Analysis and Visualization Environment)
    Copyright (C) 2008-2011 University of Massachusetts Lowell

    This file is a part of Weave.

    Weave is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License, Version 3,
    as published by the Free Software Foundation.

    Weave is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with Weave.  If not, see <http://www.gnu.org/licenses/>.
*/
-->
<SimpleVisTool
	xmlns="weave.visualization.tools.*" 
	xmlns:mx="http://www.adobe.com/2006/mxml" 
	xmlns:ui="weave.ui.*"
	xmlns:settings="weave.ui.settings.*"
	xmlns:LinkableObjectList="weave.ui.LinkableObjectList.*"
	verticalScrollPolicy="off"
	width="400" 
	title="{lang('Slider Tool')"
	height="40">

<mx:Script>
<![CDATA[
	import mx.collections.ArrayCollection;
	import mx.controls.listClasses.IListItemRenderer;
	
	import spark.collections.Sort;
	
	import weave.Weave;
	import weave.api.WeaveAPI;
	import weave.api.data.ColumnMetadata;
	import weave.api.data.IColumnReference;
	import weave.api.getCallbackCollection;
	import weave.api.linkBindableProperty;
	import weave.api.linkableObjectIsBusy;
	import weave.api.newLinkableChild;
	import weave.api.registerLinkableChild;
	import weave.api.ui.IVisTool;
	import weave.core.LinkableNumber;
	import weave.core.LinkableString;
	import weave.core.LinkableVariable;
	import weave.data.AttributeColumns.SecondaryKeyNumColumn;
	import weave.data.ColumnReferences.HierarchyColumnReference;
	import weave.utils.AsyncSort;
	import weave.utils.HierarchyUtils;
	import weave.utils.LinkableTextFormat;
	import weave.utils.VectorUtils;

	//class data
	
	//@TODO session this so that the admin can specify a different maximum delay
	private static const MAX_TIMER_DELAY:Number = 2500;
	public const timerDelay:LinkableNumber = newLinkableChild(this, LinkableNumber);
	public static const dimensionsRefs:ArrayCollection = new ArrayCollection();
	public const labelsLinkableString:LinkableString = newLinkableChild(this, LinkableString, handleLabelChange, true);
	public const currentSliderPosition:LinkableNumber = registerLinkableChild(this, new LinkableNumber(0), handleSliderChange, true);
	public const maxLabelCount:LinkableNumber = registerLinkableChild(this, new LinkableNumber(10, isFinite), handleLabelChange);
	private var _timer:Timer;
	public const unlinkedTools:LinkableVariable = registerLinkableChild(this, new LinkableVariable(Array));
	[Bindable] protected var showLinkControls:Boolean = false;
	
	internal function getUnlinkedTools():Array { return VectorUtils.flatten(unlinkedTools.getSessionState() as Array); }
	
	//constructor
	
	//This class is the base class for Slider visualization tools
	override protected function constructor():void
	{
		super.constructor();
		this.height = 40;
		// wait 1 frame before initializing labels because other tools may not be initialized yet
		WeaveAPI.StageUtils.callLater(this, initializeLabels, null, WeaveAPI.TASK_PRIORITY_IMMEDIATE);
		WeaveAPI.StageUtils.callLater(this, addCallbacks, null, WeaveAPI.TASK_PRIORITY_IMMEDIATE);

		getCallbackCollection(LinkableTextFormat.defaultTextFormat).addGroupedCallback(this, updateLabelProperties, true);
	}

	/**
	 * This function gets called after children have been created
	 */ 
	override protected function childrenCreated():void
	{
		super.childrenCreated();
		
		this.height = 40;
		
		if (! timerDelay.value)
			timerDelay.value = MAX_TIMER_DELAY;
		speedSlider.minimum = 0;
		speedSlider.maximum = 2000;
		speedSlider.toolTip = lang("Change the speed of the slider");
		speedSlider.value = MAX_TIMER_DELAY - timerDelay.value;
		//is there a timer that is still running? 
		if ((playButton != null) && (_timer != null))
		{
			playButton.toolTip = lang("Automatically cycle through the times.");
			if (_timer.running)
			{
				playButton.label = "||";
				playButton.toolTip = lang("Stop");
			}
			else
			{
				playButton.label = ">";
				playButton.toolTip = lang("Play")
			}
		}
		
		linkBindableProperty(labelsLinkableString, labelsInput, 'text');
		getCallbackCollection(WeaveAPI.globalHashMap).addGroupedCallback(this, updateLinkingControls, true);
	}
	
	/**
	 * dispose - called when the tool is deleted from the desktop
	 * */
	override public function dispose():void
	{
		if (_timer != null)
		{
			if (_timer.running) _timer.stop();
			_timer.removeEventListener(TimerEvent.TIMER, moveSlider);
		}
		super.dispose();
	}

	private function updateLinkingControls():void
	{
		var sliders:Array = WeaveAPI.globalHashMap.getNames(SliderTool);
		var lineCharts:Array = WeaveAPI.globalHashMap.getNames(LineChartTool);
		var result:Array = WeaveAPI.globalHashMap.getNames(IVisTool);
		AsyncSort.sortImmediately(result);
		for each (var names:Array in [sliders, lineCharts])
			for each (var name:String in names)
				result.splice(result.indexOf(name), 1);
		toolCheckboxList.dataProvider = result;
	}

	////abstract functions that must be overridden by subclasses of this class

	/**
	 * This function finds a list of attribute tags in the same attribute hierarchy
	 * that have the same @dataTable and @name attributes, then returns a list of
	 * the values that will go into the slider.
	 * @param ref A reference to an attribute tag in an AttributeHierarchy.
	 * @return An Array of values from the referenced column.
	 */
	protected function getValuesFromColHier(ref:HierarchyColumnReference):Array 
	{
		return null;
	}

	/**
	 * handleLabelChange
	 * This method is called every time there is a change in labels,
	 * so be sure to change labels only as often as is necesary.  
	 * */
	public function handleLabelChange():void {}	

	/** 
	 * This method is automatically called when currentSliderPosition
	 *  is changed.  Here we update all the visualization tools to 
	 *  the new time.  
	 * **/
	public function handleSliderChange():void { }
	
	/**
	 * This is specified in the HSlider - called to get the tooltip that appears when 
	 * the user probes over the slider.  Item is the index of the value that the user is hovering 
	 * over.  
	 **/
	protected function formatDataTip(item:Number):String 
	{
		return null;
	}
	
	public function addCallbacks():void { }

	//class methods that are common to all SliderTools
			
	public function get sliderValue():String
	{
		if (dimensionSlider.value == -1)
			return null;
		return dimensionSlider.labels[dimensionSlider.value];
	}
	
	private function initializeLabels(callingLater:Boolean = false):void
	{
		//we'll run through the dimensions to set the defaults
		//intialize the labels (a list of years concatenated, separated by commas)
		if (!labelsLinkableString.value)
		{
			getValuesFromCurrentDimensions();
			if (!labelsLinkableString.value)
			{
				if (!callingLater || WeaveAPI.ProgressIndicator.getTaskCount() > 0)
					callLater(initializeLabels, [true]);
				return;
			}
		}
		updateLabelProperties();
		linkBindableProperty(currentSliderPosition, dimensionSlider, 'value');
		handleSliderChange();
	}

	
	private function updateLabelProperties():void
	{
		if (!parent)
			return callLater(updateLabelProperties);
		
		LinkableTextFormat.defaultTextFormat.copyToStyle(dimensionSlider);
		dimensionSlider.invalidateProperties();
	}

	/**
	 * getTimesFromCurrentDimensions
	 * The labels for the time slider come from the dimensions 
	 *  in the visualization tools that are on the desktop.
	 *  Here we get the list of times and initialize the slider labels. 
	 *  @TODO - allow the user to link the time slider to specific tools,
	 *     the current implementation links the timeslider to all 
	 *     the tools
	 * **/
	public function getValuesFromCurrentDimensions():void
	{
		//loop through the columns, getting the possible time values for each
		//step one - just get first one
		var descendants:Array = WeaveAPI.SessionManager.getLinkableDescendants(Weave.root, HierarchyColumnReference);
		var len:int = descendants.length;
		var newLabels:Array = [];
		var lookingForLabels:Boolean = true;
		var countOfYearsFound:Number = 0;
		for (var i:int = 0; i < len; i++)
		{
			var ref:HierarchyColumnReference = descendants[i] as HierarchyColumnReference;
			var years:Array = getValuesFromColHier(ref);
			//for a default, we choose the dimension with the most values
			// the user/admin can change which dimension is used, but this is a best guess at a first default
			if (years.length > countOfYearsFound)
			{
				newLabels = years;
				countOfYearsFound = years.length;
			}
		}
		labelsLinkableString.value = newLabels.join(',');
		handleSliderChange();
	}
	
	/**
	 * This event is triggered when the user changes the dimension in the attrListCombo box
	 * */
	private function dimensionChange():void
	{
		var index:int = attrListCombo.selectedIndex;
		if (index >= dimensionsRefs.length)
			return;
		var ref:HierarchyColumnReference = dimensionsRefs.getItemAt(index) as HierarchyColumnReference;
		var times:Array = getValuesFromColHier(ref);
		labelsLinkableString.value = times.join(',');
	}

	
	protected function addToListOfDims(ref:HierarchyColumnReference):void
	{
		// stop if already in list
		for (var i:int = 0; i < dimensionsRefs.length; i++)
			if ((dimensionsRefs.getItemAt(i) as HierarchyColumnReference).getHashCode() == ref.getHashCode())
				return;
		
		// create sort function if not created yet
		if (!dimensionsRefs.sort)
		{
			dimensionsRefs.sort = new Sort();
			dimensionsRefs.sort.compareFunction = compareRefs;
			function compareRefs(a:IColumnReference, b:IColumnReference):int
			{
				return AsyncSort.compareCaseInsensitive(getRefLabel(a), getRefLabel(b));
			}
		}
		
		// add to list
		dimensionsRefs.addItem(ref);
		if (!labelsLinkableString.value)
			dimensionChange();
	}
	
	private function getRefLabel(ref:IColumnReference):String
	{
		return WeaveAPI.AttributeColumnCache.getColumn(ref).getMetadata(ColumnMetadata.TITLE);
	}
	
	/**
	 * playButtonPushed - There is a play button (above see id="playButton") that the user can push
	 *   to automatically cycle through the values.
	 *   This function is called when that button is pushed.  
	 * */
	public function playButtonPushed():void
	{
		if ((_timer == null) || (! _timer.hasEventListener(TimerEvent.TIMER)))
		{
			_timer = new Timer(timerDelay.value);
			_timer.addEventListener(TimerEvent.TIMER, moveSlider);
		}
		
		if (_timer.running)
		{
			if (playButton != null) 
			{
				playButton.label = ">";
				playButton.toolTip = lang("Play");				
			}
			_timer.stop();
		}
		else
		{
			if (playButton != null) 
			{
				playButton.label = "||";
				playButton.toolTip = lang("Stop");				
			}
			_timer.start();
		}
	}
	private function getDelay():String
	{
		var delayDescription:String = lang("{0} millisecond delay", (MAX_TIMER_DELAY - speedSlider.value).toFixed(0)); 
		return delayDescription;
	}
	
	/**
	 * speedSliderChange - this is called when user moves the speed slider
	 * */
	public function speedSliderChange():void
	{
		timerDelay.value = MAX_TIMER_DELAY - speedSlider.value;
		if (_timer && (timerDelay.value))
			_timer.delay = timerDelay.value;
	}

	/**
	 * moveSlider - This method is called everytime the timer triggers
	 * it.  It forces the slider to move.  
	 * **/
	private function moveSlider(evt:TimerEvent):void
	{
		if (linkableObjectIsBusy(WeaveAPI.globalHashMap))
			return;
		
		if (currentSliderPosition.value < dimensionSlider.maximum)
			currentSliderPosition.value++;
		else
			currentSliderPosition.value = dimensionSlider.minimum;
	}
	
	
	private function formatSpeedDataTip(item:Number):String
	{
		var delayDescription:String = getDelay();
		if (item < speedSlider.value)
		{
			return lang("slower: {0}", delayDescription);
		}
		else
		{
			return lang("faster: {0}", delayDescription);
		}
	}
			
]]>
</mx:Script>
	<mx:HBox width="100%">
		<mx:VBox width="5%">
			<mx:Button
				width="5%" id="playButton" label=">" alpha="1.0" 
				fillAlphas="[1.0, 1.0, 1.0, 1.0]" 
				click="playButtonPushed()"/>
		<mx:HSlider
			height="90%"
			id="speedSlider"
			width="50"
			liveDragging="true"
			dataTipFormatFunction="formatSpeedDataTip"
			change="speedSliderChange();"/>
		</mx:VBox>
		<mx:HSlider 
				height="90%"
				id="dimensionSlider"
				width="100%"
				dataTipFormatFunction="formatDataTip"
				snapInterval="1"
				tickInterval="1"
				liveDragging="true"
				name="{lang('Time Slider Tool')}"
				> 				
		</mx:HSlider>
	</mx:HBox>
	<ui:ControlPanel>
		<mx:VBox width="100%" id="timesliderControls"
				label="{lang('Slider controls')}">
			<ui:Indent label="{lang('Time slider labels:')}">
				<mx:TextInput id="labelsInput" 
							  width="90%"
							  />
				<mx:Button label="Reset" click="getValuesFromCurrentDimensions()"/>
			</ui:Indent>
			<mx:Label id="dimsLabel" text="{lang('Replace slider labels with values from a dimension with year values:')}" />
			<ui:CustomComboBox id="attrListCombo" dataProvider="{dimensionsRefs}" labelFunction="{getRefLabel}" change="dimensionChange()"/>
			<ui:Indent label="{lang('Max labels shown')}">
				<mx:NumericStepper minimum="0" maximum="100" stepSize="1" creationComplete="linkBindableProperty(maxLabelCount, event.target, 'value');"/>
			</ui:Indent>
			<mx:CheckBox id="checkBox_useGlobalMinMax" visible="false" includeInLayout="false" label="{lang('Use global min,max values')}" creationComplete="linkBindableProperty(SecondaryKeyNumColumn.useGlobalMinMaxValues, event.target, 'selected');"/>
			<mx:VBox height="100%" width="100%" visible="{showLinkControls}" includeInLayout="{showLinkControls}">
				<mx:Label text="Linked visualization tools"/>
				<ui:Indent height="100%" width="100%">
					<mx:List id="toolCheckboxList" height="100%" width="100%" borderStyle="none" selectable="false">
						<mx:itemRenderer>
							<mx:Component>
								<mx:CheckBox change="onChange()">
									<mx:Script>
										<![CDATA[
											import weave.api.WeaveAPI;
											import weave.ui.DraggablePanel;
											import weave.utils.AsyncSort;
											override public function set data(value:Object):void
											{
												super.data = value;
												var _unlinkedTools:Array = outerDocument.getUnlinkedTools();
												selected = _unlinkedTools.indexOf(value) < 0;
												var tool:DraggablePanel = WeaveAPI.globalHashMap.getObject(String(value)) as DraggablePanel;
												label = tool ? tool.title : String(value);
											}
											private function onChange():void
											{
												var _unlinkedTools:Array = outerDocument.getUnlinkedTools();
												var i:int = _unlinkedTools.indexOf(data);
												if (i >= 0)
													_unlinkedTools.splice(i, 1);
												if (!selected)
													_unlinkedTools.push(data);
												AsyncSort.sortImmediately(_unlinkedTools);
												outerDocument.unlinkedTools.setSessionState(_unlinkedTools);
											}
										]]>
									</mx:Script>
								</mx:CheckBox>
							</mx:Component>
						</mx:itemRenderer>
					</mx:List>
				</ui:Indent>
			</mx:VBox>
		</mx:VBox>
	</ui:ControlPanel>

</SimpleVisTool>


